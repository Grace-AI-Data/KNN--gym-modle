install.packages(c("caret","gains","pROC"))#install load the caret,proc packages
library(caret)
libray(gains)
libray(pROC)
mydata1<-scale.(mydata[2:4]) #standardize some variables,store them in new data fram called my data1
mydata1<-data.fram(mydata1,mydata$Enroll) #append the original enroll varibale back to mydata1
colnames(mydata1)[4]<-'Enroll' #use colnames function to rename my data1&$mydata.Enroll(in column 4)
mydata1$Enroll<-as.factor(mydata1$Enroll) #use as.factor to convert target variable to a catergorical data type
set.seed(1) #set rundom seed to 1 to ensure consistency
myIndex<-createDataPartition(mydata1$Enroll, p=0.6,list=FASLE) #createDataPartition function,specify Enroll as the target variable
trainSet<-myData1[myIndex,] 
validationSet<-mydata1[-myIndex,]
#use the traincontrol function to implement a 10-fold cross validation by setting the option method equal to cv and the option numbwe equal to 10
myCtrl<-trainControl(method="cv",number=10)
myGrid<-expand.grid(.k=c(1:10))  #k values from 1 to 10, store the results in an object called mygrid,check which k has the most accuracy
set.seed(1) #fix a random seed
KNN_fit<-train(Enroll~.,data=trainSet, method="knn",trControl=myCtr1,tuneGrid=myGrid)
KNN_fit  ##if the performance values from the training data are considerably better than the values from the validation and test data, overfittinf might be an issue

KNN_Class<-predict(KNN_fit, newdata=validationSet) #apply knn model, use predict on validation data set
confusionMatrix(KNN_Class,validationSet$Enroll,positive='1') #1:enrolled in the gym
#evaluate predictive performance of knn model using a different cutoff value in R,
#we first compute the probability of each case belonging to the target class instead of its class memembership
KNN_Class_prob<-predict(KNN_fit,newdata=validationSet,type='prob') #type to predict tha probability value
#ifelse function to determine the class memberships  #as.factor function to convert the calss membership to factor
confusionMatrix(as.factor(ifelse(KNN_Class_prob[,2]>0.25,'1','0'),validationSet$Enrill,positive='1'))
#convert Enroll variable back as a numerical data type as required by the gains package
validationSet$Enroll<-as.numberic(as.character(validationSet$Enroll))
gains_table<-gains(validationSet$Enroll,KNN_Class_prob[,2])
gains_table
#pot function to create the cumulative lift chart for knn
plot(c(gains_table$cume.pct.of.total*sum(validationSet$Enroll))~c(0,gains_table$cume.obs),xlab="#of cases",ylab="cumulative",main="cumulative lift chart",type="1"
#draws a dashed diagonal line to indicate the baseline model
lines(c(0,sum(validationSet$Enroll))~c(0,dim(validationSet)[1]),col="red",1ty=2)
#to plot the decile-wise lift chart, we use the barplot function to plot a bar chart
barplot(gains_tables$mean,resp/mean(validationSet$Enroll),names.arg=gains_table$depth,xlab="Percentile",ylab="lift",ylim=c(0,3),main="Decile-Wise Lift Chart")
#use roc function to produce a roc object to plot roc curve
roc_object<-roc(validationSet$Enroll,KNN_Class_prob[,2])
plot.roc(roc_object)
auc(roc_object) #to retrieve the auc value
PreProcessing<-preProcess(myData[,2:4],method=c("center","scale")) #COMPUTE the means and standard deviations of the predictor cariables in mydata,center: mean, scale: standard deviation
myScoreData1<-predict(Preproccesing,myScoreData)#standardize my scoredata and score the z-scores in new data frame named mycoredata1
KNN_Score<-predict(KNN_fit,newdata=myScoreData1) #score the new records
myScoreData<-data.frame(myScoreData,KNN_Score) #append the classification results back to the original data set
View(myScoreData) #display the updated data set
